include: "rules/commons.smk"

#Downstream varints analysis
sample_IDs, =glob_wildcards(os.path.join(mutect2_path,"{sample}.somatic.mt2.SNVs.vcf.gz"))
#https://github.com/parklab/MSIprofiler
# type=["octopus","strelka"]

rule all:
    input:
        expand(os.path.join(outPath,"result/{sample}/{sample}.Indel.variant_function"),sample=sample_IDs),
        expand(os.path.join(outPath,"result/{sample}/{sample}.Indel.exonic_variant_function"),sample=sample_IDs),
        expand(os.path.join(outPath,"result/{sample}/{sample}.SNV.variant_function"),sample=sample_IDs),
        expand(os.path.join(outPath,"result/{sample}/{sample}.SNV.exonic_variant_function"),sample=sample_IDs)

rule MT2_SNVs:
    input:
        os.path.join(mutect2_path,"{sample}.somatic.mt2.SNVs.vcf.gz")
    output:
        os.path.join(outPath,"temp/{sample}/{sample}.mt2.filter.SNVs.vcf")
    shell:
        " zcat {input}|grep -v \"#\"|awk '$7==\"PASS\"' >> {output} "

rule MT2_Indels:
    input:
        os.path.join(mutect2_path,"{sample}.somatic.mt2.INDELs.vcf.gz")
    output:
        os.path.join(outPath,"temp/{sample}/{sample}.mt2.filter.Indels.vcf")
    shell:
        " zcat {input}|grep -v \"#\"|awk '$7==\"PASS\"' >> {output} "

rule strelka_SNVs:
    input:
        os.path.join(strelka2_path,"{sample}_strelka/results/variants/somatic.snvs.vcf.gz")
    output:
        os.path.join(outPath,"temp/{sample}/{sample}.strelka.filter.SNVs.vcf")
    shell:
        "zcat {input}|grep -v \"#\"|awk '$7==\"PASS\"' >> {output} "

rule strelka_Indels:
    input:
        os.path.join(strelka2_path,"{sample}_strelka/results/variants/somatic.indels.vcf.gz")
    output:
        os.path.join(outPath,"temp/{sample}/{sample}.strelka.filter.Indels.vcf")
    shell:
        "zcat {input}|grep -v \"#\"|awk '$7==\"PASS\"' >> {output} "

rule octopus_PASS:
    input:
        os.path.join(octopus_path,"{sample}.vcf.gz")
    output:
        snv=os.path.join(outPath,"temp/{sample}/{sample}.octopus.PASS.SNVs.vcf"),
        indel=os.path.join(outPath,"temp/{sample}/{sample}.octopus.PASS.Indels.vcf")
    shell:
        "zcat {input}|grep -v \"#\"|grep \"SOMATIC\"|awk '$5!~/,/&&length($4)==length($5)&&$7==\"PASS\"' >> {output.snv}; "
        "zcat {input}|grep -v \"#\"|grep \"SOMATIC\"|awk '$5!~/,/&&length($4)!=length($5)&&$7==\"PASS\"' >> {output.indel} "

rule convert_SNV:
    input:
        octopus=os.path.join(outPath,"temp/{sample}/{sample}.octopus.PASS.SNVs.vcf"),
        strelka=os.path.join(outPath,"temp/{sample}/{sample}.strelka.filter.SNVs.vcf"),
        Mutect2=os.path.join(outPath,"temp/{sample}/{sample}.mt2.filter.SNVs.vcf"),
        convert=os.path.join(ANNOVAR,"convert2annovar.pl")
    output:
        octopus=os.path.join(outPath,"temp/{sample}/{sample}.octopus.SNV.avinput"),
        strelka=os.path.join(outPath,"temp/{sample}/{sample}.strelka.SNV.avinput"),
        Mutect=os.path.join(outPath,"temp/{sample}/{sample}.mt2.SNV.avinput"),
    conda: "mutpipe_selectpointmutations"
    shell:
        "perl {input.convert} -format vcf4old {input.octopus} -out {output.octopus}; "
        "perl {input.convert} -format vcf4old {input.Mutect2} -out {output.Mutect}; "
        "perl {input.convert} -format vcf4old {input.strelka} -out {output.strelka};"

rule convert_Indel:
    input:
        octopus=os.path.join(outPath,"temp/{sample}/{sample}.octopus.PASS.Indels.vcf"),
        Mutect2=os.path.join(outPath,"temp/{sample}/{sample}.mt2.filter.Indels.vcf"),
        strelka=os.path.join(outPath,"temp/{sample}/{sample}.strelka.filter.Indels.vcf"),
        convert=os.path.join(ANNOVAR,"convert2annovar.pl")
    output:
        octopus=os.path.join(outPath,"temp/{sample}/{sample}.octopus.Indel.avinput"),
        strelka=os.path.join(outPath,"temp/{sample}/{sample}.strelka.Indel.avinput"),
        Mutect2=os.path.join(outPath,"temp/{sample}/{sample}.mt2.Indel.avinput"),
    conda: "mutpipe_selectpointmutations"
    shell:
        "perl {input.convert} -format vcf4old {input.Mutect2} -out {output.Mutect2}; "
        "perl {input.convert} -format vcf4old {input.strelka} -out {output.strelka}; "
        "perl {input.convert} -format vcf4old {input.octopus} -out {output.octopus}; "

rule annovar_SNV:
    input:
        octopus_input=os.path.join(outPath,"temp/{sample}/{sample}.octopus.SNV.avinput"),
        strelka_input=os.path.join(outPath,"temp/{sample}/{sample}.strelka.SNV.avinput"),
        annovar=os.path.join(ANNOVAR,"table_annovar.pl"),
        humandb=os.path.abspath(humandb)
    output:
        os.path.join(outPath,"temp/{sample}/{sample}.snv.octopus.hg38_multianno.txt"),
        os.path.join(outPath,"temp/{sample}/{sample}.snv.strelka.hg38_multianno.txt")
    params:
        octopus_out=os.path.join(outPath,"temp/{sample}/{sample}.snv.octopus"),
        strelka_out=os.path.join(outPath,"temp/{sample}/{sample}.snv.strelka"),
    conda: "mutpipe_selectpointmutations"
    shell:
        "perl {input.annovar} {input.octopus_input} {input.humandb} -buildver hg38 "
        "-out {params.octopus_out} -remove -protocol gnomad30_genome "
        "-operation f -nastring . -polish;"
        "perl {input.annovar} {input.strelka_input} {input.humandb} -buildver hg38 "
        "-out {params.strelka_out} -remove -protocol gnomad30_genome "
        "-operation f -nastring . -polish;"

rule annovar_Indel:
    input:
        octopus_input=os.path.join(outPath,"temp/{sample}/{sample}.octopus.Indel.avinput"),
        strelka_input=os.path.join(outPath,"temp/{sample}/{sample}.strelka.Indel.avinput"),
        annovar=os.path.join(ANNOVAR,"table_annovar.pl"),
        humandb=os.path.abspath(humandb)
    output:
        os.path.join(outPath,"temp/{sample}/{sample}.indel.octopus.hg38_multianno.txt"),
        os.path.join(outPath,"temp/{sample}/{sample}.indel.strelka.hg38_multianno.txt")
    params:
        octopus_out=os.path.join(outPath,"temp/{sample}/{sample}.indel.octopus"),
        strelka_out=os.path.join(outPath,"temp/{sample}/{sample}.indel.strelka"),
    conda: "mutpipe_selectpointmutations"
    shell:
        "perl {input.annovar} {input.octopus_input} {input.humandb} -buildver hg38 "
        "-out {params.octopus_out} -remove -protocol gnomad30_genome "
        "-operation f -nastring . -polish;"
        "perl {input.annovar} {input.strelka_input} {input.humandb} -buildver hg38 "
        "-out {params.strelka_out} -remove -protocol gnomad30_genome "
        "-operation f -nastring . -polish;"

rule merge_SNV:
    input:
        octopus_input=os.path.join(outPath,"temp/{sample}/{sample}.snv.octopus.hg38_multianno.txt"),
        strelka_input=os.path.join(outPath,"temp/{sample}/{sample}.snv.strelka.hg38_multianno.txt"),
        Mutect2_input=os.path.join(outPath,"temp/{sample}/{sample}.mt2.SNV.avinput")
    output:
        os.path.join(outPath,"result/{sample}/{sample}.tumor.SNV.out"),
    shell:
        "cat {input.Mutect2_input} "
        "<(cat {input.strelka_input}| awk '$6<=0.0001') "
        "<(cat {input.octopus_input}| awk '$6<=0.0001') "
        """| awk '{{print $1,$2,$3,$4,$5}}'|sort|uniq -c """
        """| awk '$1>=2 {{print $2,$3,$4,$5,$6}}' >> {output}"""

rule merge_INDEL:
    input:
        octopus_input=os.path.join(outPath,"temp/{sample}/{sample}.indel.octopus.hg38_multianno.txt"),
        strelka_input=os.path.join(outPath,"temp/{sample}/{sample}.indel.strelka.hg38_multianno.txt"),
        Mutect2_input=os.path.join(outPath,"temp/{sample}/{sample}.mt2.Indel.avinput")
    output:
        os.path.join(outPath,"result/{sample}/{sample}.tumor.INDEL.out")
    shell:
        "cat {input.Mutect2_input} "
        "<(cat {input.strelka_input}| awk '$6<=0.0001') "
        "<(cat {input.octopus_input}| awk '$6<=0.0001') "
        """| awk '{{print $1,$2,$3,$4,$5}}'|sort|uniq -c """
        """| awk '$1>=2 {{print $2,$3,$4,$5,$6}}' >> {output}"""

rule anno_SNV:
    input:
        input=os.path.join(outPath,"result/{sample}/{sample}.tumor.SNV.out"),
        anno=os.path.join(ANNOVAR,"annotate_variation.pl"),
        humandb=os.path.abspath(humandb)
    output:
        os.path.join(outPath,"result/{sample}/{sample}.SNV.exonic_variant_function"),
        os.path.join(outPath,"result/{sample}/{sample}.SNV.variant_function"),
    params:
        os.path.join(outPath,"result/{sample}/{sample}.SNV"),
    conda: "mutpipe_selectpointmutations"
    shell:
        """
        perl {input.anno} -out {params} -build hg38 {input.input} {input.humandb}
        """

rule anno_Indel:
    input:
        input=os.path.join(outPath,"result/{sample}/{sample}.tumor.INDEL.out"),
        anno=os.path.join(ANNOVAR,"annotate_variation.pl"),
        humandb=os.path.abspath(humandb)
    output:
        os.path.join(outPath,"result/{sample}/{sample}.Indel.exonic_variant_function"),
        os.path.join(outPath,"result/{sample}/{sample}.Indel.variant_function"),
    params:
        os.path.join(outPath,"result/{sample}/{sample}.Indel"),
    conda: "mutpipe_selectpointmutations"
    shell:
        """
        perl {input.anno} -out {params} -build hg38 {input.input} {input.humandb}
        """
