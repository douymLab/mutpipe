##GATK: v4.2.2.0
import socket
include: "rules/common.smk"
sample_IDs, =glob_wildcards(os.path.join(dnacopy_res,"result/{sample}.CNVs"))
#sample_IDs="DO52556"
# a pseudo-rule that collects the target files
rule all:
	input:
		#expand("result/{sample}.g2.point.bed",sample=sample_IDs),
		expand(os.path.join(outPath,"result/{sample}.g2.point.bed.log2.pdf"),sample=sample_IDs),
		expand(os.path.join(outPath,"result/{sample}.3.point.bed.log2.pdf"),sample=sample_IDs),
		#expand("avinput/{sample}.seg_vote_by_g2.avinput",sample=sample_IDs),
		expand(os.path.join(outPath,"anno/{sample}.g2.variant_function"),sample=sample_IDs),
		expand(os.path.join(outPath,"anno/{sample}.e3.variant_function"),sample=sample_IDs),

rule decom_hs38:
	input: 
		fa = os.path.join(gz_ref_dir,fa_gz),
		fai = os.path.join(gz_ref_dir,fai),
		dict = os.path.join(gz_ref_dir,dict),
	output:
		fa = os.path.join(ref_dir,fa),
		fai = os.path.join(ref_dir,fai),
		dict = os.path.join(ref_dir,dict),
	conda: "mutpipe_mutect2",
	shell:
		"""
		zcat {input.fa} > {output.fa};
		cp {input.fai} {output.fai};
		cp {input.dict} {output.dict};
		"""

rule merge_cnv:
	input: 
		bicseq2=os.path.join(bic_seq2_res,"{sample}_pvalue.CNVs"),
		dnacopy=os.path.join(dnacopy_res,"result/{sample}.CNVs"),
		freec_cnv=os.path.join(freec_res,"result/{sample}.tumor.bam_CNVs"),
		freec_median_ratio=os.path.join(freec_res,"result/{sample}_median_ratio.txt"),
		chrlen=os.path.join(gz_ref_dir,hg38_len),
		centromeric=os.path.join(gz_ref_dir,centromeric),
		telomere=os.path.join(gz_ref_dir,telomere),
	output:
		g2=os.path.join(outPath,"result/{sample}.seg_vote_by_g2.bed"),
		e3=os.path.join(outPath,"result/{sample}.seg_vote_by_3.bed"),
	params:
		sample="{sample}",
		output_dir=os.path.join(outPath,"result"),
		expand_len="50000",
		script_dir="workflow/scripts",
	conda: "mutpipe_mergecnv"
	shell:
		"""
		sh workflow/scripts/run_merge_cnv.sh {params.sample} {input.bicseq2} {input.dnacopy} {input.freec_cnv} {input.freec_median_ratio} {input.chrlen} {input.centromeric} {input.telomere} {params.expand_len} {params.output_dir} {params.script_dir}
		"""

rule convert_to_avinput:
	input:
		g2_cnvs=os.path.join(outPath,"result/{sample}.seg_vote_by_g2.bed"),
		e3_cnvs=os.path.join(outPath,"result/{sample}.seg_vote_by_3.bed"),
	output:
		g2_avinput=os.path.join(outPath,"avinput/{sample}.seg_vote_by_g2.avinput"),
		e3_avinput=os.path.join(outPath,"avinput/{sample}.seg_vote_by_3.avinput"),
	shell:
		"""
		grep -v "start" {input.g2_cnvs} | awk -F '\\t' '{{printf "%s\\t%s\\t%s\\t%s\\t%s\\t%s\\t%s\\t%s\\t%s\\n", $1,$2,$3,0,0,$4,$5,$6,$7}}' > {output.g2_avinput}
		grep -v "start" {input.e3_cnvs} | awk -F '\\t' '{{printf "%s\\t%s\\t%s\\t%s\\t%s\\t%s\\t%s\\t%s\\t%s\\n", $1,$2,$3,0,0,$4,$5,$6,$7}}' > {output.e3_avinput}
		"""
rule annotate:
	input:
		g2_avinput=os.path.join(outPath,"avinput/{sample}.seg_vote_by_g2.avinput"),
		e3_avinput=os.path.join(outPath,"avinput/{sample}.seg_vote_by_3.avinput"),
	output:
		g2_vf=os.path.join(outPath,"anno/{sample}.g2.variant_function"),
		e3_vf=os.path.join(outPath,"anno/{sample}.e3.variant_function"),
	params:
		g2_prefix=os.path.join(outPath,"anno/{sample}.g2"),
		e3_prefix=os.path.join(outPath,"anno/{sample}.e3"),
		humandb=humandb_path,
	conda: "mutpipe_mergecnv"
	shell:
		"""
		perl {annovar_path}/annotate_variation.pl -out {params.g2_prefix} -build hg38 {input.g2_avinput} {params.humandb}
		perl {annovar_path}/annotate_variation.pl -out {params.e3_prefix} -build hg38 {input.e3_avinput} {params.humandb}
		"""
rule makeGraph_input:
	input:
		g2=os.path.join(outPath,"result/{sample}.seg_vote_by_g2.bed"),
		e3=os.path.join(outPath,"result/{sample}.seg_vote_by_3.bed"),
		depth=os.path.join(dnacopy_res,"depth/{sample}.depth.regions.logratio.mainchr.bed"),
		chrlen=os.path.join(gz_ref_dir,hg38_len_offset),
	output:
		g2=os.path.join(outPath,"result/{sample}.g2.point.bed"),
		e3=os.path.join(outPath,"result/{sample}.3.point.bed"),
	params:
		sample="{sample}",
		result_prefix=os.path.join(outPath,"result"),
		tmp="tmp",
	conda: "mutpipe_mergecnv"
	shell:
		"""
		sh workflow/scripts/makeGraph.sh {params.sample} {input.depth} {input.chrlen} {params.result_prefix} {params.tmp}
		"""
rule makeGraph:
	input:
		chrlen=os.path.join(gz_ref_dir,hg38_len_offset),
		g2=os.path.join(outPath,"result/{sample}.g2.point.bed"),
		e3=os.path.join(outPath,"result/{sample}.3.point.bed"),
	output:
		g2=os.path.join(outPath,"result/{sample}.g2.point.bed.log2.pdf"),
		e3=os.path.join(outPath,"result/{sample}.3.point.bed.log2.pdf"),
	params:
		sample="{sample}",
	conda: "mutpipe_mergecnv"
	shell:
		"""
		cat workflow/scripts/makeGraph.R| R --slave --arg {input.chrlen} {input.g2} {input.e3} {params.sample}
		"""
